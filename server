#!/usr/bin/env ruby

require 'drb/drb'
require 'benchmark'

DRB_URI = "druby://0.0.0.0:#{ENV['PORT']}"

class PanicRoom
  require 'fakefs'

  instance_methods.each do |name|
    class_eval do
      unless name =~ /^__|^instance_eval$|^binding$|^object_id$|^private_methods$|^protected_methods$|public_methods$/
        undef_method name
      end
    end
  end

end

class Runner
  def execute_arbitrary_code(code)
    stderr = StringIO.new
    stdout = StringIO.new

    $stderr = stderr
    $stdout = stdout

    panic_room = PanicRoom.new
    code.untaint

    # Assume errors
    exit_code = 1
    wall_time = 0
    result = nil

    Timeout::timeout(5) do
      wall_time = Benchmark.realtime do
        result = proc do
          panic_room.instance_eval do
            $SAFE = 3
            binding
          end.eval(code)
        end.call
        puts result
      end
    end

    exit_code = 0
  rescue => e
    if e.is_a?(Timeout::Error)
      stderr.puts "Your code took too long to run, try again and see if you don't have any loops that keep on running"
    else
      stderr.puts "An error happened while running your code. If there was a message, you will find it below.\n\n\n"
      stderr.puts e.message
    end
  ensure
    output =  {
      result: result,
      stdout: out_to_s(stdout),
      stderr: out_to_s(stderr),
      wall_time: wall_time * 1000,
      exit_code: exit_code
    }
    return output
  end

  def out_to_s(out)
    return out if out.is_a?(String)
    out.string
  end
end

FRONT_OBJECT = Runner.new

puts "Starting DRb server..."
DRb.start_service(DRB_URI, FRONT_OBJECT, verbose: true, safe_level: 0)
puts "Server is now listening on: #{DRB_URI}."
DRb.thread.join
